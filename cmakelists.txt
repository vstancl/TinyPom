cmake_minimum_required(VERSION 3.30)

cmake_policy(SET CMP0177 NEW)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/conan_version.cmake)


option(BUILD_CONAN_INSTALL "Run conan install as part of the config stage." ON)

# Set project details
project(TinyPom LANGUAGES CXX)
set(PROJECT_NAME TinyPom)

#------------------------------------------------------------------------
# Conan related stuff...

if (${BUILD_CONAN_INSTALL} AND ${CONAN_VERSION_MAJOR} EQUAL 1)
  set(BUILD_CONAN_INSTALL_FOLDER "${CMAKE_CURRENT_BINARY_DIR}/conan" CACHE PATH "Location where the conan config files are installed. Note that the packages itself are downloaded to ~/.conan folder.")

  # Include custom VS fixed conan.cmake file
  include(${CMAKE_CURRENT_SOURCE_DIR}/CMake/conan.cmake)

  # Install libraries for each configuration type
  # This downloads the libs and generates *.cmake files into the build/conan folder
  foreach (TYPE ${CMAKE_CONFIGURATION_TYPES})
    #Ignore profile and detect settings from the current environment.
    conan_cmake_autodetect(BUILD_SETTINGS BUILD_TYPE ${TYPE})
    conan_cmake_install(PATH_OR_REFERENCE ${CMAKE_CURRENT_SOURCE_DIR}
                        BUILD missing
                        INSTALL_FOLDER ${BUILD_CONAN_INSTALL_FOLDER}
                        OUTPUT_FOLDER ${CMAKE_BINARY_DIR}
                        SETTINGS ${BUILD_SETTINGS}
                        GENERATOR "cmake_find_package_multi"
    )
  endforeach()

  # Append conan install folder as a search path for find_package
  list(APPEND CMAKE_PREFIX_PATH ${BUILD_CONAN_INSTALL_FOLDER})
endif()

#------------------------------------------------------------------------
# QHotKey stuff

find_package(QHotkey REQUIRED)

message(STATUS "QHotkey_INCLUDE_DIRS: ${QHotkey_INCLUDE_DIRS}")

#------------------------------------------------------------------------
# General project stuff

set(RUNTIME_DIR ${CMAKE_CURRENT_BINARY_DIR}/bin/$<CONFIG>)
set(TEST_RUNTIME_DIR "${CMAKE_CURRENT_BINARY_DIR}/bin/tests/$<CONFIG>")


# Require C++17 (or newer if needed)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set output directories for all build files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Create a dedicated "build" directory for CMake-generated files
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_CACHEFILE_DIR ${CMAKE_BINARY_DIR})
set(CMAKE_TEMP_DIR ${CMAKE_BINARY_DIR})

# Detect if Conan is being used
if(EXISTS "${CMAKE_BINARY_DIR}/conan_toolchain.cmake")
    include("${CMAKE_BINARY_DIR}/conan_toolchain.cmake")
    set(USE_CONAN TRUE)
else()
    set(USE_CONAN FALSE)
endif()

# Find Qt (Conan or system)
# Conan installs Qt under its package structure
find_package(Qt6 COMPONENTS REQUIRED Widgets Multimedia MultimediaWidgets)

if(NOT Qt6_FOUND)
    find_package(Qt5 COMPONENTS REQUIRED Widgets Multimedia MultimediaWidgets)
    set(QT_VERSION 5)
else()
    set(QT_VERSION 6)
endif()

# Ensure Qt resources are compiled
if(QT_VERSION EQUAL 6)
    qt_add_resources(RESOURCE_FILES res/resources.qrc)
else()
    qt5_add_resources(RESOURCE_FILES res/resources.qrc)
endif()

#------------------------------------------------------------------------

# Enable automoc, autouic, and autorcc
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

file(GLOB_RECURSE UI_FILES "${CMAKE_SOURCE_DIR}/src/*.ui")  # Collect all .ui files
qt_wrap_ui(GENERATED_UI_FILES ${UI_FILES})  # Ensure UIC processing

set(CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_BINARY_DIR})
include_directories(${CMAKE_BINARY_DIR})  # Add to include paths

# Find all sources and headers of the project
file(GLOB_RECURSE SRC_HEADER_FILES "${CMAKE_SOURCE_DIR}/src/*.cpp" "${CMAKE_SOURCE_DIR}/src/*.h")  # Collect all .cpp and .h files

qt_add_resources(APP_RESOURCES resources.qrc)

# Set the target executable
# Set the necessary flags based on the platform
if(WIN32)
    add_executable(${PROJECT_NAME} WIN32
        ${SRC_HEADER_FILES}
        ${UI_FILES}
        ${RESOURCE_FILES}  # Include compiled resource file
    )
elseif(APPLE)
    add_executable(${PROJECT_NAME}
        ${SRC_HEADER_FILES}
        ${UI_FILES}
        ${RESOURCE_FILES}  # Include compiled resource file
    )
else()  # For Linux, don't need special flags
    add_executable(${PROJECT_NAME}
        ${SRC_HEADER_FILES}
        ${UI_FILES}
        ${RESOURCE_FILES}  # Include compiled resource file
    )
endif()

target_include_directories(${PROJECT_NAME} PRIVATE ${QHOTKEY_DIR})

# Link Qt libraries (Qt5 or Qt6)
if(QT_VERSION EQUAL 6)
    target_link_libraries(${PROJECT_NAME} PRIVATE ${CONAN_LIBS} qhotkey::qhotkey Qt6::Widgets Qt6::Multimedia)
else()
    target_link_libraries(${PROJECT_NAME} PRIVATE ${CONAN_LIBS} qhotkey::qhotkey Qt5::Widgets Qt5::Multimedia)
endif()

message(STATUS "Include directories: ${CONAN_INCLUDE_DIRS}")

# Installation (optional)
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ".")

file(GLOB_RECURSE RELEASE_DLLS "${CMAKE_BINARY_DIR}/../lib/*.dll")
list(FILTER RELEASE_DLLS EXCLUDE REGEX ".*d\\.dll$")  # Exclude debug DLLs


foreach(DLL ${RELEASE_DLLS})
    # Get the relative path from the original 'lib' directory
    file(RELATIVE_PATH REL_PATH "${CMAKE_BINARY_DIR}/../lib" "${DLL}")

    # Extract only the directory path (without the filename)
    get_filename_component(REL_DIR "${REL_PATH}" DIRECTORY)

    # Install DLLs into the correct subdirectory under 'bin/'
    install(FILES "${DLL}" DESTINATION "./${REL_DIR}")
endforeach()

#--------------------------------------------------------------------------------------------------------------
set(CPACK_PACKAGE_NAME "TinyPom")
set(CPACK_PACKAGE_VERSION "0.8.0")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Small pomodoro technique tracking timer")
set(CPACK_PACKAGE_VENDOR "SchtutsleeCzech")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/License.txt") 
set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md") 

# set(CPACK_GENERATOR "NSIS") # Windows EXE Installer
# set(CPACK_GENERATOR "WIX") # Windows MSI Installer (requires WiX)
# set(CPACK_GENERATOR "DragNDrop") # macOS DMG
# set(CPACK_GENERATOR "DEB") # Linux .deb package
# set(CPACK_GENERATOR "RPM") # Linux .rpm package

set(CPACK_GENERATOR "NSIS;ZIP") # Creates both an installer and a ZIP file

include(CPack)